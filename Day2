// Prompt: use binary search to find the maximum integer in an array

public static int getMax(int[] arr){
  return process(arr, 0, arr.length-1);
}

public static int process(int[] arr, L, R){
  //base case where there's only one element left in the array
  if (L == R){
    return arr[L];
  }
  // start recursion
  int mid = L + ((R - L) >> 1); // this step is equal to mid = (L + R) / 2
  int leftMax = process(arr, L, mid);
  int rightMax = process(arr, mid + 1, R);
  return Math.max((leftMax, rightMax);
  
}

// T(N) = a * T (N/b) + O(N^d)
// in this case: a = 2, b = 2, d = 0

// Merge Sort using recursion
package Sorting;

import java.util.Arrays;

public class MergeSort {

    public static void Merge_Sort(int[] arr) {
        if (arr == null || arr.length == 0) {
            return;
        }
        process(arr, 0, arr.length - 1);
    }
    public static void process(int[] arr, int L, int R){
        if (L == R){
            return;
        }

        int mid = L + ((R - L) >> 1);
        process(arr, L, mid);
        process(arr, mid + 1, R);
        merge(arr, L, mid, R);
    }

    public static void merge(int[] arr, int L, int mid, int R){
        int[] help = new int[R - L + 1];
        int i = 0;
        int p1 = L;
        int p2 = mid + 1;

        while (p1 <= mid && p2 <= R) {
            help[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];
        }
        while (p1 <= mid){
            help[i++] = arr[p1++];
        }
        while (p2 <= R){
            help[i++] = arr[p2++];
        }
        for (int k = 0; k < help.length; k++) {
            arr[L + k] = help[k];
        }
    }
}

